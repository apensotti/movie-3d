services:
  backend:
    build:
      context: ./backend/app  # Set context to project root
      dockerfile: Dockerfile
      args:
        - APP_ENV=${APP_ENV-prod}
    container_name: backend
    restart: unless-stopped
    volumes:
      - ./backend/app/data:/app/data
    ports:
      - "8000:8000"
    expose:
      - "8000"
    networks:
      - app-network
    env_file:
      - ./.env.${APP_ENV-prod}

  frontend:
    build:
      context: ./frontend  # Set context to project root
      dockerfile: Dockerfile
      args:
        - APP_ENV=${APP_ENV-prod}
    container_name: frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    expose:
      - "3000"
    networks:
      - app-network
    env_file:
      - ./.env.${APP_ENV-prod}

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

  mysql:
    image: mysql:latest
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_USER: alex
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: movies
    volumes:
      - mysqldata:/var/lib/mysql
      - ./mysql/movies.csv:/var/lib/mysql-files/movies.csv  # Mount CSV to secure_file_priv directory
    ports:
      - "3307:3306"
    networks:
      - app-network

networks:
  app-network:
    name: movie-3d_app-network
    driver: bridge

volumes:
  mysqldata:
