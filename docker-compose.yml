services:
  backend:
    build:
      context: ./backend/app  # Set context to project root
      dockerfile: Dockerfile
      args:
        - APP_ENV=${APP_ENV-prod}
    container_name: backend
    restart: unless-stopped
    volumes:
      - ./backend/app/data:/app/data
    ports:
      - "8000:8000"
    expose:
      - "8000"
    networks:
      - app-network
    env_file:
      - ./.env.${APP_ENV-prod}

  frontend:
    build:
      context: ./frontend  # Set context to project root
      dockerfile: Dockerfile
      args:
        - APP_ENV=${APP_ENV-prod}
    container_name: frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    expose:
      - "3000"
    networks:
      - app-network
    env_file:
      - ./.env.${APP_ENV-prod}

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - app-network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.0
    container_name: logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    environment:
      - LS_JAVA_OPTS=-Xms1g -Xmx2g  # Adjust these values as needed
    networks:
      - app-network
    depends_on:
      - elasticsearch

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

networks:
  app-network:
    name: movie-3d_app-network
    driver: bridge
